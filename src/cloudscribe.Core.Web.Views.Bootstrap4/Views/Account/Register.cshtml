@model cloudscribe.Core.Web.ViewModels.Account.RegisterViewModel
@inject ISiteContextResolver siteResolver
@inject ICoreThemeHelper themeHelper
@inject SiteContext Tenant
@inject IStringLocalizer<CloudscribeCore> sr
@{
    var themeSettings = themeHelper.GetThemeSettings();
    ViewData["BodyClass"] = "account-section registration-page";
    ViewData["SocialFormat"] = sr["Register using your {0} account"];
    ViewData["SocialHeading"] = sr["Use an existing account"];
    var Tenant = await siteResolver.ResolveSite(Context.Request.Host.Host, Context.Request.Path);

}
@section Meta {
    <meta name="robots" content="noindex" />
}
@section Styles {
    @{await Html.RenderPartialAsync("RegistrationStylePartial"); }
}
@if (!string.IsNullOrWhiteSpace(Model.RecaptchaSiteKey))
{
    <script src='https://www.google.com/recaptcha/api.js'></script>
}
@if (Model.UseInvisibleCaptcha)
{
    <script>
        function onCaptchaSubmit(token) { document.getElementById("register-form").submit(); }
    </script>
}
<h2>@ViewData["Title"]</h2>
@if (!string.IsNullOrWhiteSpace(Model.RegistrationPreamble))
{
    await Html.RenderPartialAsync("RegisterPreamblePartial", Model);
}
<form id="register-form" asp-controller="Account" asp-action="Register" asp-route-returnurl='@ViewData["ReturnUrl"]'
      data-submit-once="true" >
    <input asp-for="UserId" type="hidden" />
    <h4>@sr["Create a new account."]</h4>
    <hr />
    @*<div asp-validation-summary="All" class="text-danger"></div>*@
    @if (!Model.UseEmailForLogin)
    {
        <div class="form-group">
            <label asp-for="Username">@sr["Username"]</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="@themeSettings.Icons.Username" aria-hidden="true"></i></span>
                </div>
                <input asp-for="Username" class="form-control" />
                <span asp-validation-for="Username" class="invalid-feedback"></span>
                @Html.ValidationMessage("usernameerror", new { @class = "text-error" })
            </div>
        </div>

    }
    <div class="form-group">
        <label asp-for="Email">@sr["Email"]</label>
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text"><i class="@themeSettings.Icons.Email" aria-hidden="true"></i></span>
            </div>
            <input asp-for="Email" class="form-control" />
            <span asp-validation-for="Email" class="invalid-feedback"></span>
        </div>
    </div>
    @{await Html.RenderPartialAsync("RegisterMiddle", Model); }
    <div class="form-group">
        <label asp-for="Password">@sr["Password"]</label>
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text"><i class="@themeSettings.Icons.Password" aria-hidden="true"></i></span>
            </div>
            <input asp-for="Password" class="form-control" />
            <span asp-validation-for="Password" class="invalid-feedback"></span>
        </div>

    </div>
    <div class="form-group">
        <label asp-for="ConfirmPassword">@sr["Confirm Password"]</label>
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text"><i class="@themeSettings.Icons.Password" aria-hidden="true"></i></span>
            </div>
            <input asp-for="ConfirmPassword" class="form-control" />
            <span asp-validation-for="ConfirmPassword" class="invalid-feedback"></span>
        </div>
    </div>
    @if (!string.IsNullOrWhiteSpace(Model.RegistrationAgreement))
    {
        await Html.RenderPartialAsync("RegisterAgreementPartial", Model);
    }
    else
    {
        <input name="AgreeToTerms" value="true" type="hidden" />
    }
    @if (!string.IsNullOrWhiteSpace(Model.RecaptchaSiteKey) && !Model.UseInvisibleCaptcha)
    {
        <div class="form-group">
            <div class=" g-recaptcha" data-sitekey="@Model.RecaptchaSiteKey"></div>
            @Html.ValidationMessage("recaptchaerror", new { @class = "text-error" })
        </div>
    }

    <div class="form-group">
        @if (!string.IsNullOrWhiteSpace(Model.RecaptchaSiteKey) && Model.UseInvisibleCaptcha)
        {
            <button class="btn btn-default g-recaptcha" data-sitekey="@Model.RecaptchaSiteKey" data-callback='onCaptchaSubmit' data-enabled-text='@sr["Register"]' data-disabled-text='@sr["Working..."]'>@sr["Register"]</button>
        }
        else
        {
            <button name="submit" type="submit" class="btn btn-default" data-enabled-text='@sr["Register"]' data-disabled-text='@sr["Working..."]'>@sr["Register"]</button>
        }
        <input type="hidden" asp-for="UseEmailForLogin" />
    </div>
</form>
@{
    var LoginProviders = Model.ExternalAuthenticationList.ToList();
    if (LoginProviders.Count > 0)
    {
        await Html.RenderPartialAsync("SocialLoginPartial", LoginProviders);
    }
}
@section Scripts {
    @{await Html.RenderPartialAsync("RegistrationScriptsPartial"); }
    <script src="~/cr/js/jquery.validate.hooks.min.js"></script>
    <script src="~/cr/js/jqueryvaildation.submitonce-unobtrusive.min.js"></script>
    
}
